{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnyZodObject, z, ZodError } from 'zod';\n\nexport function zParse<T extends AnyZodObject>(schema: T, data: unknown): z.infer<T> {\n\ttry {\n\t\treturn schema.parse(data);\n\t} catch (error) {\n\t\tif (error instanceof ZodError) {\n\t\t\tthrow new Error(error.message);\n\t\t}\n\t\tthrow new Error(JSON.stringify(error));\n\t}\n}\n\nexport type GameEvent = z.infer<typeof zodGameEvent>;\nexport type PlayerBoard = z.infer<typeof zodPlayerBoard>;\nexport type Result = z.infer<typeof zodResult>;\nexport type Coordinates = z.infer<typeof zodCoordinates>;\nexport type Message = z.infer<typeof zodMessage>;\nexport type CellStyle = z.infer<typeof zodCellStyle>;\nexport type CellState = z.infer<typeof zodCellState>;\n\nconst zodMessageType = z.enum(['PLAYER_READY', 'GAME_START', 'PLAYER_JOIN', 'ATTACK', 'RESULT', 'GAME_OVER', 'WINNER']);\nconst zodCellState = z.enum(['EMPTY', 'SHIP', 'SHOT_MISS', 'SHIP_HIT', 'SHIP_SUNK']);\nconst zodResult = z.enum(['SHOT_MISS', 'SHIP_HIT', 'SHIP_SUNK']);\nconst zodCellStyle = z.enum(['', 'INVALID', 'VALID']);\n\nexport const zodGameId = z.string().trim().min(8, 'Invalid game code.');\n\nexport const zodPlayerId = z.string().trim().min(12, 'Invalid player ID.');\n\nexport const zodPlayerName = z\n\t.string()\n\t.trim()\n\t.toLowerCase()\n\t.min(1, 'Name is required.')\n\t.max(20, 'Name must be less than 20 characters.');\n\nconst zodCoordinates = z.object({\n\tx: z.number().min(0).max(9),\n\ty: z.number().min(0).max(9),\n});\n\nconst zodAxis = z.literal('y').or(z.literal('x'));\n\nconst zodShipLength = z.number().min(1).max(5);\n\nconst zodShipId = z.string().trim().length(8, 'Invalid ship ID');\n\nconst zodShipPlacement = z.object({\n\tcoordinates: zodCoordinates,\n\taxis: zodAxis,\n\tshipLength: zodShipLength,\n\tshipId: zodShipId,\n});\n\n// Maximum number of ships is 7.\nexport const zodPlayerBoard = z.array(zodShipPlacement).min(0).max(7);\n\nexport const zodGameEvent = z.object({\n\tcoordinates: zodCoordinates,\n\tplayerId: zodPlayerId,\n\tresult: zodResult,\n\tshipId: z.nullable(zodShipId),\n});\n\nexport const zodMessage = z.object({\n\ttype: zodMessageType,\n\tplayerId: zodPlayerId,\n\tgameId: zodGameId,\n\tcoordinates: zodCoordinates.optional(),\n\tevents: z.array(zodGameEvent).optional(),\n\tname: zodPlayerName.optional(),\n\tturn: z.number().min(0).max(1).optional(),\n});\n\nexport const loaderDataSchema = z.object({\n\tgameId: zodGameId,\n\tplayerId: zodPlayerId,\n\tname: zodPlayerName,\n\tenemyName: z.nullable(zodPlayerName),\n\tboard: zodPlayerBoard,\n\tevents: z.array(zodGameEvent),\n\tturn: z.number().min(0).max(1),\n\tplayerTurn: z.number().min(0).max(1),\n\tstarted: z.boolean(),\n\tready: z.boolean(),\n});\n"]}